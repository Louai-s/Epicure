{"ast":null,"code":"var _jsxFileName = \"/Users/louaisalem/epicure/src/components/Body/PopularRestaurants/MultiRangeSlider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./multiRangeSlider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = _ref => {\n  _s();\n\n  let {\n    min,\n    max,\n    onChange\n  } = _ref;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to decrease from the left side\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]); // Set width of the range to decrease from the right side\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]); // Get min and max values when their state changes\n\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      onChange: event => {\n        const value = Math.min(Number(event.target.value), maxVal - 1);\n        setMinVal(value);\n        minValRef.current = value;\n      },\n      className: \"thumb thumb--left\" //style={{ zIndex: minVal > max - 100 && \"5\" }}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      onChange: event => {\n        const value = Math.max(Number(event.target.value), minVal + 1);\n        setMaxVal(value);\n        maxValRef.current = value;\n      },\n      className: \"thumb thumb--right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__left-value\",\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__right-value\",\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiRangeSlider, \"SeUqQYH07YuBSgo+StlXrVLsDfI=\");\n\n_c = MultiRangeSlider;\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useRef","PropTypes","MultiRangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","event","Number","target","propTypes","number","isRequired","func"],"sources":["/Users/louaisalem/epicure/src/components/Body/PopularRestaurants/MultiRangeSlider.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./multiRangeSlider.css\";\n\nconst MultiRangeSlider = ({ min, max, onChange }:any) => {\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range:any = useRef(null);\n\n  // Convert to percentage\n  const getPercent = useCallback(\n    (value:any) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  // Set width of the range to decrease from the left side\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]);\n\n  // Set width of the range to decrease from the right side\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]);\n\n  // Get min and max values when their state changes\n  useEffect(() => {\n    onChange({ min: minVal, max: maxVal });\n  }, [minVal, maxVal, onChange]);\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        onChange={(event) => {\n          const value = Math.min(Number(event.target.value), maxVal - 1);\n          setMinVal(value);\n          minValRef.current = value;\n        }}\n        className=\"thumb thumb--left\"\n        //style={{ zIndex: minVal > max - 100 && \"5\" }}\n      />\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        onChange={(event) => {\n          const value = Math.max(Number(event.target.value), minVal + 1);\n          setMaxVal(value);\n          maxValRef.current = value;\n        }}\n        className=\"thumb thumb--right\"\n      />\n\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div ref={range} className=\"slider__range\" />\n        <div className=\"slider__left-value\">{minVal}</div>\n        <div className=\"slider__right-value\">{maxVal}</div>\n      </div>\n    </div>\n  );\n};\n\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default MultiRangeSlider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}